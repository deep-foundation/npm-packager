{
  "package": {
    "name": "@deep-foundation/npm-packager",
    "version": "0.0.0"
  },
  "data": [
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Type"
      },
      "id": 1
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Any"
      },
      "id": 2
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "PackageQuery"
      },
      "id": 3
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "SyncTextFile"
      },
      "id": 4
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Handler"
      },
      "id": 5
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "HandleInsert"
      },
      "id": 6
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "dockerSupportsJs"
      },
      "id": 7
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Package"
      },
      "id": 8
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Value"
      },
      "id": 9
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "String"
      },
      "id": 10
    },
    {
      "id": "Install",
      "type": 1,
      "from": 2,
      "to": 3
    },
    {
      "id": "installCode",
      "type": 4,
      "value": {
        "value": "async ({ deep, require, gql, data: { newLink } }) => {\n  const fs = require('fs');\n\n  const makeTempDirectory = () => {\n    const os = require('os');\n    const { v4: uuid } = require('uuid');\n    \n    const baseTempDirectory = os.tmpdir();\n    const randomId = uuid();\n    const tempDirectory = [baseTempDirectory,randomId].join('/');\n    fs.mkdirSync(tempDirectory);\n    console.log(tempDirectory);\n    return tempDirectory;\n  };\n  const npmInstall = (packageName, tempDirectory) => {\n    const execSync = require('child_process').execSync;\n\n    const command = `npm --prefix \"${tempDirectory}\" i ${packageName}`;\n    const output = execSync(command, { \n        encoding: 'utf-8',\n        cwd: tempDirectory\n    });\n    console.log(`${command}\\n`, output);\n    return output;\n  };\n  const getPackage = (tempDirectory, packageName) => {\n    const packageFile = [tempDirectory, 'node_modules', packageName, 'deep.json'].join('/');\n    console.log(packageFile);\n    const pkg = require(packageFile);\n    console.log(pkg);\n    return pkg;\n  };\n  const deepImport = async (pkg) => {\n    const packager = new (require('@deep-foundation/deeplinks/imports/packager')).Packager(deep);\n    const imported = await packager.import(pkg);\n    console.log(imported);\n    if (imported?.errors?.length) throw imported.errors;\n    return imported;\n  };\n\n  const { data: [packageQuery] } = await deep.select({ id: newLink.to_id });\n  const packageName = packageQuery?.value?.value;\n  if (!packageName) {\n    throw \"Package query value is empty.\";\n  }\n  const tempDirectory = makeTempDirectory();\n  npmInstall(packageName, tempDirectory);\n  const pkg = getPackage(tempDirectory, packageName);\n  fs.rmSync(tempDirectory, { recursive: true, force: true });\n  const imported = await deepImport(pkg);\n  await deep.insert({\n    type_id: await deep.id('@deep-foundation/core', 'Contain'),\n    from_id: newLink.from_id,\n    to_id: imported.packageId,\n  });\n  return imported;\n}"
      }
    },
    {
      "id": "installCodeHandler",
      "type": 5,
      "from": 7,
      "to": "installCode"
    },
    {
      "id": "installCodeHandleInsert",
      "type": 6,
      "from": "Install",
      "to": "installCodeHandler"
    },
    {
      "id": "Publish",
      "type": 1,
      "from": 8,
      "to": 3
    },
    {
      "id": "publishCode",
      "type": 4,
      "value": {
        "value": "async ({ deep, require, gql, data: { triggeredByLinkId, newLink } }) => {\n  const fs = require('fs');\n  const semver = require('semver')\n  \n  const makeTempDirectory = () => {\n    const os = require('os');\n    const { v4: uuid } = require('uuid');\n    \n    const baseTempDirectory = os.tmpdir();\n    const randomId = uuid();\n    const tempDirectory = [baseTempDirectory,randomId].join('/');\n    fs.mkdirSync(tempDirectory);\n    console.log(tempDirectory);\n    return tempDirectory;\n  };\n  const npmInstall = (packageName, tempDirectory) => {\n    const execSync = require('child_process').execSync;\n  \n    const command = `npm --prefix \"${tempDirectory}\" i ${packageName}`;\n    const output = execSync(command, { \n        encoding: 'utf-8',\n        cwd: tempDirectory\n    });\n    console.log(`${command}\\n`, output);\n    return output;\n  };\n  const npmLogin = (token, tempDirectory) => {\n    const execSync = require('child_process').execSync;\n  \n    const command = `npm set \"//registry.npmjs.org/:_authToken\" ${token}`;\n    const output = execSync(command, { \n        encoding: 'utf-8',\n        cwd: tempDirectory\n    });\n    console.log(`${command}\\n`, output);\n    return output;\n  };\n  const npmPublish = (tempDirectory) => {\n    const execSync = require('child_process').execSync;\n  \n    const command = `npm publish --access public`;\n    const output = execSync(command, { \n        encoding: 'utf-8',\n        cwd: tempDirectory\n    });\n    console.log(`${command}\\n`, output);\n    return output;\n  };\n  const makeDeepPackagePath = (tempDirectory, packageName) => [tempDirectory, 'node_modules', packageName].join('/');\n  const makeDeepJsonPath = (packagePath) => [packagePath, 'deep.json'].join('/');\n  const makePackageJsonPath = (packagePath) => [packagePath, 'package.json'].join('/');\n  const deepExport = async (packageId) => {\n    const packager = new (require('@deep-foundation/deeplinks/imports/packager')).Packager(deep);\n    const exported = await packager.export({ packageLinkId: packageId });\n    console.log(exported);\n    if (exported?.errors?.length) throw exported.errors;\n    return exported;\n  };\n  \n  const { data: [packageQuery] } = await deep.select({ id: newLink.to_id });\n  const packageName = packageQuery?.value?.value;\n  if (!packageName) {\n    throw 'Package query value is empty.';\n  }\n  const containTreeId = await deep.id('@deep-foundation/core', 'containTree');\n  const tokenTypeId = await deep.id('@deep-foundation/npm-packager', 'Token');\n\n  const result = await deep.select({\n    up: {\n      tree_id: { _eq: containTreeId },\n      parent: { id: { _eq: deep.linkId } },\n      link: { type_id: { _eq: tokenTypeId } }\n    }\n  });\n\n  return { triggeredByLinkId, packageName, userId: deep.linkId, containTreeId, tokenTypeId, result };\n\n  const tempDirectory = makeTempDirectory();\n  npmInstall(packageName, tempDirectory);\n  const deepPackagePath = makeDeepPackagePath(tempDirectory, packageName);\n  const deepJsonPath = makeDeepJsonPath(deepPackagePath);\n  const packageJsonPath = makePackageJsonPath(deepPackagePath);\n  // const pkg = require(deepJsonPath);\n  \n  const encoding = 'utf8';\n  \n  const npmPckgJSON = fs.readFileSync(packageJsonPath, { encoding });\n  let npmPckg;\n  let nextVersion;\n  if (!npmPckgJSON) {\n    throw 'package.json is not found in installed package';\n  } else {\n    npmPckg = JSON.parse(npmPckgJSON);\n    npmPckg.version = nextVersion = semver.inc(npmPckg?.version || '0.0.0', 'patch');\n  }\n  \n  // TODO: Not sure about this.\n  // TODO: Should we update the version inside deep?\n  // TODO: May be we would allow to user to set specific version if they like or only they can interpret changes in code?\n  await deep.update({\n    link: {\n      type_id: { _eq: await deep.id('@deep-foundation/core', 'PackageVersion') },\n      to_id: { _eq: newLink.from_id },\n    },\n  }, { value: nextVersion }, { table: 'strings' });\n  \n  fs.writeFileSync(packageJsonPath, JSON.stringify(npmPckg), { encoding });\n  \n  const pkg = await deepExport(newLink.from_id);\n  \n  console.log(pkg);\n  \n  fs.writeFileSync(deepJsonPath, JSON.stringify(pkg, null, 2), encoding);\n  \n  npmLogin(deepPackagePath);\n  npmPublish(deepPackagePath);\n  \n  fs.rmSync(tempDirectory, { recursive: true, force: true });\n  // const exported = await deepExport();\n  // return exported;\n}"
      }
    },
    {
      "id": "publishCodeHandler",
      "type": 5,
      "from": 7,
      "to": "publishCode"
    },
    {
      "id": "publishCodeHandleInsert",
      "type": 6,
      "from": "Publish",
      "to": "publishCodeHandler"
    },
    {
      "id": "Token",
      "type": 1
    },
    {
      "id": "tokenValue",
      "type": 9,
      "from": "Token",
      "to": 10
    }
  ],
  "errors": [],
  "dependencies": [
    {
      "name": "@deep-foundation/core"
    }
  ]
}