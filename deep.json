{
  "package": {
    "name": "@deep-foundation/npm-packager",
    "version": "0.0.0"
  },
  "data": [
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Type"
      },
      "id": 1
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Any"
      },
      "id": 2
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "PackageQuery"
      },
      "id": 3
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "SyncTextFile"
      },
      "id": 4
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Handler"
      },
      "id": 5
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "HandleInsert"
      },
      "id": 6
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "dockerSupportsJs"
      },
      "id": 7
    },
    {
      "id": "Install",
      "type": 1,
      "from": 2,
      "to": 3
    },
    {
      "id": "installCode",
      "type": 4,
      "value": {
        "value": "async ({ deep, require, gql, data: { newLink } }) => {\n  const fs = require('fs');\n\n  const makeTempDirectory = () => {\n    const os = require('os');\n    const { v4: uuid } = require('uuid');\n    \n    const baseTempDirectory = os.tmpdir();\n    const randomId = uuid();\n    const tempDirectory = [baseTempDirectory,randomId].join('/');\n    fs.mkdirSync(tempDirectory);\n    console.log(tempDirectory);\n    return tempDirectory;\n  };\n  const npmInstall = (packageName, tempDirectory) => {\n    const execSync = require('child_process').execSync;\n\n    const command = `npm i ${packageName}`;\n    const output = execSync(command, { \n        encoding: 'utf-8',\n        cwd: tempDirectory\n    });\n    console.log(`${command}\\n`, output);\n    return output;\n  };\n  const getPackage = (tempDirectory, packageName) => {\n    const packageFile = [tempDirectory, 'node_modules', packageName, 'deep.json'].join('/');\n    console.log(packageFile);\n    const pkg = require(packageFile);\n    console.log(pkg);\n    return pkg;\n  };\n  const deepImport = async (pkg) => {\n    const packager = new (require('@deep-foundation/deeplinks/imports/packager')).Packager(deep);\n    const imported = await packager.import(pkg);\n    console.log(imported);\n    if (imported?.errors?.length) throw imported.errors;\n    return imported;\n  };\n\n  const { data: [packageQuery] } = await deep.select({ id: newLink.to_id });\n  const packageName = packageQuery?.value?.value;\n  const tempDirectory = makeTempDirectory();\n  npmInstall(packageName, tempDirectory);\n  const pkg = getPackage(tempDirectory, packageName);\n  fs.rmSync(tempDirectory, { recursive: true, force: true });\n  const imported = await deepImport(pkg);\n  return imported;\n}"
      }
    },
    {
      "id": "installCodeHandler",
      "type": 5,
      "from": 7,
      "to": "installCode"
    },
    {
      "id": "installCodeHandleInsert",
      "type": 6,
      "from": "Install",
      "to": "installCodeHandler"
    }
  ],
  "errors": [],
  "dependencies": [
    {
      "name": "@deep-foundation/core"
    }
  ]
}